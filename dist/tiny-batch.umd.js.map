{"version":3,"file":"tiny-batch.umd.js","sources":["../src/schedulers.ts","../src/queue.ts","../src/index.ts"],"sourcesContent":["import {Scheduler} from \"./types\";\r\n\r\n/**\r\n * Queues a flush in the microtask queue at the first call.\r\n */\r\nexport const microtaskScheduler = (): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            queueMicrotask(flush);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Flushes every given ms, regardless of the queue.\r\n */\r\nexport const intervalScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setInterval>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setInterval(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearInterval(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Waits the given amount of ms after the first call to flush.\r\n */\r\nexport const timeoutScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setTimeout>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setTimeout(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearTimeout(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Flushes after the given amount of calls.\r\n * @param max\r\n */\r\nexport const amountScheduler = (max: number): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === max) {\r\n            flush();\r\n        }\r\n    };\r\n};\r\n","import {Reject, Resolve, Resolver} from \"./types\";\r\n\r\n\r\nexport class Queue<Args, Result> {\r\n    readonly args: Args[] = [];\r\n    readonly resolvers: Resolver<Result>[] = [];\r\n\r\n    add(args: Args, resolve: Resolve<Result>, reject: Reject): void {\r\n        this.args.push(args);\r\n        this.resolvers.push({resolve, reject});\r\n    }\r\n\r\n    reset(): {args: Args[]; resolvers: Resolver<Result>[]} {\r\n        const args = this.args.splice(0);\r\n        const resolvers = this.resolvers.splice(0);\r\n\r\n        return {args, resolvers};\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.args.length === 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.args.length;\r\n    }\r\n}\r\n","import {AddToBatch, ExecuteBatch, Scheduler} from \"./types\";\r\nimport {microtaskScheduler} from \"./schedulers\";\r\nimport {Queue} from \"./queue\";\r\n\r\nexport * from \"./schedulers\";\r\nexport * from \"./types\";\r\n\r\nexport function tinybatch<\r\n    Args extends unknown[],\r\n    Result,\r\n>(\r\n    callback: ExecuteBatch<Args, Result>,\r\n    scheduler: Scheduler = microtaskScheduler()\r\n): AddToBatch<Args, Result> {\r\n\r\n    const queue = new Queue<Args, Result>();\r\n\r\n    const fn: AddToBatch<Args, Result> = (...args) => {\r\n        return new Promise((resolve, reject) => {\r\n            queue.add(args, resolve, reject);\r\n\r\n            scheduler(queue.args, fn.flush);\r\n        });\r\n    };\r\n\r\n    fn.queue = queue;\r\n    fn.scheduler = scheduler;\r\n    fn.flush = async () => {\r\n        if (queue.isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        const {args, resolvers} = queue.reset();\r\n        const results = await callback(args) ?? [];\r\n\r\n        for (let i = 0; i < resolvers.length; i++) {\r\n            const { resolve, reject } = resolvers[i];\r\n            const result = results[i];\r\n\r\n            if (result instanceof Error) {\r\n                reject(result);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        }\r\n    };\r\n\r\n    return fn;\r\n}\r\n\r\nexport default tinybatch;"],"names":["microtaskScheduler","queue","flush","length","queueMicrotask","intervalScheduler","ms","timerId","fn","setInterval","stop","clearInterval","timeoutScheduler","setTimeout","clearTimeout","amountScheduler","max","Queue","args","resolvers","_proto","prototype","add","resolve","reject","push","reset","splice","isEmpty","_createClass","key","get","tinybatch","callback","scheduler","_arguments","arguments","Promise","slice","call","_queue$reset","then","results","i","_resolvers$i","result","Error","e"],"mappings":"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"}