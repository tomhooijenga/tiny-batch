{"version":3,"file":"tiny-batch.umd.js","sources":["../src/schedulers.ts","../src/queue.ts","../src/index.ts"],"sourcesContent":["import {Scheduler} from \"./types\";\r\n\r\n/**\r\n * Queues a flush in the microtask queue at the first call.\r\n */\r\nexport const microtaskScheduler = (): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            queueMicrotask(flush);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Flushes every given ms, regardless of the queue.\r\n */\r\nexport const intervalScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setInterval>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setInterval(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearInterval(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Waits the given amount of ms after the first call to flush.\r\n */\r\nexport const timeoutScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setTimeout>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setTimeout(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearTimeout(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Flushes after the given amount of calls.\r\n * @param max\r\n */\r\nexport const amountScheduler = (max: number): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === max) {\r\n            flush();\r\n        }\r\n    };\r\n};\r\n","import {Reject, Resolve} from \"./types\";\r\n\r\nexport class Queue<Result, Args> {\r\n    readonly args: Args[] = [];\r\n    readonly resolvers: {resolve: Resolve<Result>; reject: Reject}[] = [];\r\n\r\n    add(args: Args, resolve: Resolve<Result>, reject: Reject): void {\r\n        this.args.push(args);\r\n        this.resolvers.push({resolve, reject});\r\n    }\r\n\r\n    reset(): {args: Args[]; resolvers: {resolve: Resolve<Result>; reject: Reject}[]} {\r\n        const args = this.args.splice(0);\r\n        const resolvers = this.resolvers.splice(0);\r\n\r\n        return {args, resolvers};\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.args.length === 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.args.length;\r\n    }\r\n}\r\n","import {AddToBatch, ExecuteBatch, Scheduler} from \"./types\";\r\nimport {microtaskScheduler} from \"./schedulers\";\r\nimport {Queue} from \"./queue\";\r\n\r\nexport * from \"./schedulers\";\r\nexport * from \"./types\";\r\n\r\nexport function tinybatch<\r\n    Result,\r\n    Args extends unknown[] = []\r\n>(\r\n    callback: ExecuteBatch<Result, Args>,\r\n    scheduler: Scheduler = microtaskScheduler()\r\n): AddToBatch<Result, Args> {\r\n\r\n    const queue = new Queue<Result, Args>();\r\n\r\n    const fn: AddToBatch<Result, Args> = (...args: Args) => {\r\n        return new Promise<Result>((resolve, reject) => {\r\n            queue.add(args, resolve, reject);\r\n\r\n            scheduler(queue.args, fn.flush);\r\n        });\r\n    };\r\n\r\n    fn.queue = queue;\r\n    fn.scheduler = scheduler;\r\n    fn.flush = () => {\r\n        if (queue.isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        const {args, resolvers} = queue.reset();\r\n\r\n        Promise\r\n            .resolve(callback(args))\r\n            .then((results) => {\r\n                results.forEach((result, index) => {\r\n                    const {resolve, reject} = resolvers[index];\r\n\r\n                    if (result instanceof Error) {\r\n                        reject(result);\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                });\r\n            });\r\n    };\r\n\r\n    return fn;\r\n}\r\n\r\nexport default tinybatch;\r\n"],"names":["microtaskScheduler","queue","flush","length","queueMicrotask","intervalScheduler","ms","timerId","fn","setInterval","stop","clearInterval","timeoutScheduler","setTimeout","clearTimeout","amountScheduler","max","Queue","args","resolvers","add","resolve","reject","push","reset","splice","isEmpty","tinybatch","callback","scheduler","Promise","then","results","forEach","result","index","Error"],"mappings":"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"}