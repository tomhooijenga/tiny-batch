{"version":3,"file":"tiny-batch.modern.mjs","sources":["../src/schedulers.ts","../src/queue.ts","../src/index.ts"],"sourcesContent":["import {Scheduler} from \"./types\";\r\n\r\n/**\r\n * Queues a flush in the microtask queue at the first call.\r\n */\r\nexport const microtaskScheduler = (): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            queueMicrotask(flush);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Flushes every given ms, regardless of the queue.\r\n */\r\nexport const intervalScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setInterval>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setInterval(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearInterval(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Waits the given amount of ms after the first call to flush.\r\n */\r\nexport const timeoutScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setTimeout>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setTimeout(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearTimeout(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Flushes after the given amount of calls.\r\n * @param max\r\n */\r\nexport const amountScheduler = (max: number): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === max) {\r\n            flush();\r\n        }\r\n    };\r\n};\r\n","import {Reject, Resolve} from \"./types\";\r\n\r\nexport class Queue<Result, Args> {\r\n    readonly args: Args[] = [];\r\n    readonly resolvers: {resolve: Resolve<Result>; reject: Reject}[] = [];\r\n\r\n    add(args: Args, resolve: Resolve<Result>, reject: Reject): void {\r\n        this.args.push(args);\r\n        this.resolvers.push({resolve, reject});\r\n    }\r\n\r\n    reset(): {args: Args[]; resolvers: {resolve: Resolve<Result>; reject: Reject}[]} {\r\n        const args = this.args.splice(0);\r\n        const resolvers = this.resolvers.splice(0);\r\n\r\n        return {args, resolvers};\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.args.length === 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.args.length;\r\n    }\r\n}\r\n","import {AddToBatch, ExecuteBatch, Scheduler} from \"./types\";\r\nimport {microtaskScheduler} from \"./schedulers\";\r\nimport {Queue} from \"./queue\";\r\n\r\nexport * from \"./schedulers\";\r\nexport * from \"./types\";\r\n\r\nexport function tinybatch<\r\n    Result,\r\n    Args extends unknown[] = []\r\n>(\r\n    callback: ExecuteBatch<Result, Args>,\r\n    scheduler: Scheduler = microtaskScheduler()\r\n): AddToBatch<Result, Args> {\r\n\r\n    const queue = new Queue<Result, Args>();\r\n\r\n    const fn: AddToBatch<Result, Args> = (...args: Args) => {\r\n        return new Promise<Result>((resolve, reject) => {\r\n            queue.add(args, resolve, reject);\r\n\r\n            scheduler(queue.args, fn.flush);\r\n        });\r\n    };\r\n\r\n    fn.queue = queue;\r\n    fn.scheduler = scheduler;\r\n    fn.flush = () => {\r\n        if (queue.isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        const {args, resolvers} = queue.reset();\r\n\r\n        Promise\r\n            .resolve(callback(args))\r\n            .then((results) => {\r\n                results.forEach((result, index) => {\r\n                    const {resolve, reject} = resolvers[index];\r\n\r\n                    if (result instanceof Error) {\r\n                        reject(result);\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                });\r\n            });\r\n    };\r\n\r\n    return fn;\r\n}\r\n\r\nexport default tinybatch;\r\n"],"names":["microtaskScheduler","queue","flush","length","queueMicrotask","intervalScheduler","ms","timerId","fn","setInterval","stop","clearInterval","timeoutScheduler","setTimeout","clearTimeout","amountScheduler","max","Queue","args","resolvers","add","resolve","reject","push","reset","splice","isEmpty","tinybatch","callback","scheduler","Promise","then","results","forEach","result","index","Error"],"mappings":"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"}