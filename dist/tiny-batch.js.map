{"version":3,"file":"tiny-batch.js","sources":["../src/schedulers.ts","../src/queue.ts","../src/index.ts"],"sourcesContent":["import {Scheduler} from \"./types\";\r\n\r\n/**\r\n * Queues a flush in the microtask queue at the first call.\r\n */\r\nexport const microtaskScheduler = (): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            queueMicrotask(flush);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Flushes every given ms, regardless of the queue.\r\n */\r\nexport const intervalScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setInterval>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setInterval(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearInterval(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Waits the given amount of ms after the first call to flush.\r\n */\r\nexport const timeoutScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setTimeout>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setTimeout(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearTimeout(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Flushes after the given amount of calls.\r\n * @param max\r\n */\r\nexport const amountScheduler = (max: number): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === max) {\r\n            flush();\r\n        }\r\n    };\r\n};\r\n","import {Reject, Resolve} from \"./types\";\r\n\r\nexport class Queue<Result, Args> {\r\n    readonly args: Args[] = [];\r\n    readonly resolvers: {resolve: Resolve<Result>; reject: Reject}[] = [];\r\n\r\n    add(args: Args, resolve: Resolve<Result>, reject: Reject): void {\r\n        this.args.push(args);\r\n        this.resolvers.push({resolve, reject});\r\n    }\r\n\r\n    reset(): {args: Args[]; resolvers: {resolve: Resolve<Result>; reject: Reject}[]} {\r\n        const args = this.args.splice(0);\r\n        const resolvers = this.resolvers.splice(0);\r\n\r\n        return {args, resolvers};\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.args.length === 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.args.length;\r\n    }\r\n}\r\n","import {AddToBatch, ExecuteBatch, Scheduler} from \"./types\";\r\nimport {microtaskScheduler} from \"./schedulers\";\r\nimport {Queue} from \"./queue\";\r\n\r\nexport * from \"./schedulers\";\r\nexport * from \"./types\";\r\n\r\nexport function tinybatch<\r\n    Result,\r\n    Args extends unknown[] = []\r\n>(\r\n    callback: ExecuteBatch<Result, Args>,\r\n    scheduler: Scheduler = microtaskScheduler()\r\n): AddToBatch<Result, Args> {\r\n\r\n    const queue = new Queue<Result, Args>();\r\n\r\n    const fn: AddToBatch<Result, Args> = (...args: Args) => {\r\n        return new Promise<Result>((resolve, reject) => {\r\n            queue.add(args, resolve, reject);\r\n\r\n            scheduler(queue.args, fn.flush);\r\n        });\r\n    };\r\n\r\n    fn.queue = queue;\r\n    fn.scheduler = scheduler;\r\n    fn.flush = () => {\r\n        if (queue.isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        const {args, resolvers} = queue.reset();\r\n\r\n        Promise\r\n            .resolve(callback(args))\r\n            .then((results) => {\r\n                results.forEach((result, index) => {\r\n                    const {resolve, reject} = resolvers[index];\r\n\r\n                    if (result instanceof Error) {\r\n                        reject(result);\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                });\r\n            });\r\n    };\r\n\r\n    return fn;\r\n}\r\n\r\nexport default tinybatch;\r\n"],"names":["microtaskScheduler","queue","flush","length","queueMicrotask","intervalScheduler","ms","timerId","fn","setInterval","stop","clearInterval","timeoutScheduler","setTimeout","clearTimeout","amountScheduler","max","Queue","args","resolvers","_proto","prototype","add","resolve","reject","push","reset","splice","isEmpty","_createClass","key","get","tinybatch","callback","scheduler","_arguments","arguments","Promise","slice","call","_queue$reset","then","results","forEach","result","index","_resolvers$index","Error"],"mappings":"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"}