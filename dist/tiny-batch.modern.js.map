{"version":3,"file":"tiny-batch.modern.js","sources":["../src/schedulers.ts","../src/queue.ts","../src/index.ts"],"sourcesContent":["import {Scheduler} from \"./types\";\r\n\r\n/**\r\n * Queues a flush in the microtask queue at the first call.\r\n */\r\nexport const microtaskScheduler = (): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            queueMicrotask(flush);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Flushes every given ms, regardless of the queue.\r\n */\r\nexport const intervalScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setInterval>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setInterval(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearInterval(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Waits the given amount of ms after the first call to flush.\r\n */\r\nexport const timeoutScheduler = (ms: number): Scheduler & { stop(): void } => {\r\n    let timerId: ReturnType<typeof setTimeout>;\r\n    const fn: Scheduler & { stop(): void } = (queue, flush) => {\r\n        if (queue.length === 1) {\r\n            timerId = setTimeout(flush, ms);\r\n        }\r\n    };\r\n    fn.stop = () => {\r\n        clearTimeout(timerId);\r\n    };\r\n\r\n    return fn;\r\n};\r\n\r\n/**\r\n * Flushes after the given amount of calls.\r\n * @param max\r\n */\r\nexport const amountScheduler = (max: number): Scheduler => {\r\n    return (queue, flush) => {\r\n        if (queue.length === max) {\r\n            flush();\r\n        }\r\n    };\r\n};\r\n","import {Reject, Resolve} from \"./types\";\r\n\r\nexport class Queue<Result, Args> {\r\n    readonly args: Args[] = [];\r\n    readonly resolvers: {resolve: Resolve<Result>; reject: Reject}[] = [];\r\n\r\n    add(args: Args, resolve: Resolve<Result>, reject: Reject): void {\r\n        this.args.push(args);\r\n        this.resolvers.push({resolve, reject});\r\n    }\r\n\r\n    reset(): {args: Args[]; resolvers: {resolve: Resolve<Result>; reject: Reject}[]} {\r\n        const args = this.args.splice(0);\r\n        const resolvers = this.resolvers.splice(0);\r\n\r\n        return {args, resolvers};\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.args.length === 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.args.length;\r\n    }\r\n}\r\n","import {AddToBatch, ExecuteBatch, Scheduler} from \"./types\";\r\nimport {microtaskScheduler} from \"./schedulers\";\r\nimport {Queue} from \"./queue\";\r\n\r\nexport * from \"./schedulers\";\r\nexport * from \"./types\";\r\n\r\nexport function tinybatch<\r\n    Result,\r\n    Args extends unknown[] = []\r\n>(\r\n    callback: ExecuteBatch<Result, Args>,\r\n    scheduler: Scheduler = microtaskScheduler()\r\n): AddToBatch<Result, Args> {\r\n\r\n    const queue = new Queue<Result, Args>();\r\n\r\n    const fn: AddToBatch<Result, Args> = (...args: Args) => {\r\n        return new Promise<Result>(((resolve, reject) => {\r\n            queue.add(args, resolve, reject);\r\n\r\n            scheduler(queue.args, fn.flush);\r\n        }));\r\n    };\r\n\r\n    fn.queue = queue;\r\n    fn.scheduler = scheduler;\r\n    fn.flush = () => {\r\n        if (queue.isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        const {args, resolvers} = queue.reset();\r\n\r\n        Promise\r\n            .resolve(callback(args))\r\n            .then((results) => {\r\n                results.forEach((result, index) => {\r\n                    const {resolve, reject} = resolvers[index];\r\n\r\n                    if (result instanceof Error) {\r\n                        reject(result);\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                });\r\n            });\r\n    };\r\n\r\n    return fn;\r\n}\r\n\r\nexport default tinybatch;\r\n"],"names":["microtaskScheduler","queue","flush","length","queueMicrotask","intervalScheduler","ms","timerId","fn","setInterval","stop","clearInterval","timeoutScheduler","setTimeout","clearTimeout","amountScheduler","max","Queue","constructor","add","args","resolve","reject","push","resolvers","reset","splice","isEmpty","tinybatch","callback","scheduler","Promise","then","results","forEach","result","index","Error"],"mappings":"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"}